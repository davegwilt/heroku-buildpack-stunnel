#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
STUNNEL_VERSION="4.56"
S3_BUCKET="gregburek-buildpack-pgbouncer"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# import package_download
source $LP_DIR/support/package

echo "Using stunnel version: ${STUNNEL_VERSION}" | indent

# vendor directories
VENDORED_STUNNEL="vendor/stunnel"

# vendor stunnel into the slug
PATH="$BUILD_DIR/$VENDORED_STUNNEL/bin:$PATH"
echo "-----> Fetching and vendoring stunnel into slug"
mkdir -p "$BUILD_DIR/$VENDORED_STUNNEL/var/run/stunnel/"
package_download "stunnel" "${STUNNEL_VERSION}" "${BUILD_DIR}/${VENDORED_STUNNEL}"


STUNNEL_STARTUP_FILE=${STUNNEL_STARTUP_FILE:-YES}
if [[ $STUNNEL_STARTUP_FILE != "YES" ]]; then
  echo "-----> Skipping the startup script"
  echo "-----> stunnel done"
  exit 0
fi

echo "-----> Generating the startup script"
mkdir -p "$BUILD_DIR/.profile.d"
cat >>$BUILD_DIR/.profile.d/start-stunnel.sh <<'EOF'
#!/usr/bin/env bash

echo "at=info service=stunnel action=start config=$HOME/conf/stunnel.conf"
$HOME/vendor/stunnel/bin/stunnel $HOME/conf/stunnel.conf &
EOF

if [ -f $BUILD_DIR/conf/stunnel.conf ]; then
  echo "       stunnel will use config at /app/conf/stunnel.conf at boot"
else
  echo "!      WARNING: Couldn't find $BUILD_DIR/conf/stunnel.conf."
fi

echo "-----> stunnel done"
